# -*- coding:utf-8 -*-

# 单词分析
import collections


class cla_NLU:
    def __init__(self, cla_dic={}, member=[], features={}):
        self.cla_dic = cla_dic
        self.member = member
        self.features = features


class w_ana:
    def __init__(self, wo='', pos='', cla='', wgr='',
                 wgr_ty='', syn='', sp_cla='', rel='', yuf='', ele='',hn_dic={}):
        self.wo = wo  # 单词
        self.pos = pos  # 词性
        self.wgr = wgr  # 词组分析输出
        self.wgr_ty = wgr_ty  # 词组类型
        self.cla = cla  # 分类
        self.syn = syn  # 同义词
        self.sp_cla = sp_cla  # 单字语义,被借用
        self.rel = rel  # 语法依存线路
        self.yuf = yuf  # 依存语法关系 即HED COO SBV...
        self.ele = ele  # 匹配上的语义元素，如@G.in，
        self.hn_dic = hn_dic

# 词语信息（分析）类，段落分析列表成员
class sen_ana:
    def __init__(self, sen_in='', sen_mean='', env_mean='', exp_mean='',
                 w_anas=[], l_form='', d_form=''):
        self.sen_in = sen_in  # 句子原文
        self.sen_mean = sen_mean  # 本句逻辑语义，单句语义元素的集合主谓宾等
        self.env_mean = env_mean  # 环境逻辑语义，标明本句和其它句子关系，如因果条件递进转折、疑问、回答、
        self.exp_mean = exp_mean  # 经验逻辑语义，单句或多句推导出来的言外之意
        self.w_anas = w_anas  # 单词分析列表组成句子
        self.l_form = l_form  # 本句match获得的逻辑语句
        self.d_form = d_form  # 本句match过来的描述句式


class ph_und:
    def __init__(self, input='',thinking='' ,Semdic=collections.OrderedDict(), phsen_ana=[]):
        self.rec = [input, thinking]
        self.Semdic = {}  # 语义字典队列 ,降维度，方便存储
        self.Stsdic = {}  # 统计字典从语义字典中独立出来
        self.phsen_ana = phsen_ana  # 句子分析列表组成段落，即phsen_ana

class PosTag:
    def pos_cn(self, pos_str):
        return {
            'a': '形容词',
            'b': '形容词',
            'c': '连词',
            'd': '副词',
            'e': '感叹词',
            'g': '语素',
            'h': '前缀',
            'i': '习语',
            'j': '缩写',
            'k': '后缀',
            'm': '数词',
            'n': '名词',
            'nd': '方位名词',
            'nh': '人名',
            'ni': '组织名称',
            'nl': '方位名词',
            'ns': '地名',
            'nt': '时间名词',
            'nz': '其他专有名词',
            'o': '拟声词',
            'p': '介词',
            'q': '量词',
            'r': '代词',
            'u': '助词',
            'v': '动词',
            'wp': '标点',
            'ws': '外来词',
            'x': '非语义'
        }.get(pos_str, 'error')
    pos_cn = classmethod(pos_cn)


class Conj:
    def conj_mat(self, conj_mat):
        return {'并列': '[又也]_[又也还],有时|一会儿|一边|一面_有时|一会儿|一边|一面',
                 '列举': '一[来则]_二[来则]',
                 '选择': '或.?|要么_或.?|要么,不是_[就便]是,宁[可愿肯]_[也绝]不,与其_不如|宁肯',
                 '递进': '不[仅但]_而且|反而',
                 '转折': '别说_就是,虽[然说]|尽管_但是|不过|然而,任凭|即使|就算|再_也,不[轮管]_都',
                 '条件': '如果|只要|一旦?_就,[唯只]有|除非_才',
                 '因果': '因为_所以'}.get(conj_mat, 'error')
        conj_mat = classmethod(conj_mat)


thinkdes_dic = {}




conj_dic = {'并列': '[又也]_[又也还],有时|一会儿|一边|一面_有时|一会儿|一边|一面',
                 '列举': '一[来则]_二[来则]',
                 '选择': '或.?|要么_或.?|要么,不是_[就便]是,宁[可愿肯]_[也绝]不,与其_不如|宁肯',
                 '递进': '不[仅但]_而且|反而',
                 '转折': '别说_就是,虽[然说]|尽管_但是|不过|然而,任凭|即使|就算|再_也,不[轮管]_都',
                 '条件_结论': '如果|只要|一旦?_就,[唯只]有|除非_才',

                 '结果': '因此,于是,所以,就',
                 '原因': '因为,由于'}

# 表达控制规则 @S（scan）表示替换思维log中的扫描语义变量，@S.ps表示依次循环劈开log中的重要变量,
# syn表示可替换同义词,在后边的.0表示首个归0的同义词，如果没有就随机
# S012表示主题被+号劈开的各部分分开表达
Exp_dic = {'V':'@S0呀@S0+@S0那是必须的+一起@S0+不是@S0的时候+@S0@S0不错+为什么要@S0+@S0谁最强',
            '逻辑':'有个@S0,好嘛+这下子,@S0了',
            '时间':'@S0的时候呀+原来是@S0+@S0就这样了',
           '结果':'那么就@S0吧+能@S0很好呀+你一定喜欢@S0+必须@S0',
           '主语+V+宾语':'有人说@S1@S2的事+@S0经常@S1@S2吗，真好+我也想@S1一下@S2！+ @S1@S2我也要去！+@S0呀@S0，@S1@S2吧+@S1@S2的是@S1呢',
            '计量':'我数数，@S0+还有@S0+@S0好多啊+@S0给我一个行不',
           '同类词':'',
           '应当':'@S0理所当然+@S0很有必要+我们应当@S0+@S0是好习惯',
           '看情况':'是否@S0看情况吧+有时@S0，有时未必+不一定总要@S0',
           '不该':'@S0不是好事+一般需要避免@S0+我们不喜欢@S0这样',
'比喻':'@S0和@S1好像啊+这儿的@S0，就像@S1的样子+貌似@S1，实为@S0',
            '触景生情':'每当@S0出现在眼前，也许@S1就涌上心头+我们感受@S0的景象，产生了@S1的情感+我们受到@S0的触动，引起@S1的感情',
            '寓情于景':'我们将@S0的情感，融入到@S1的景色当中+@S1的景象，寄托了我们@S0的情感+我们把@S0情感蕴含在@S1描写中'
}

Rem_dic = {'日常.动词':'每天都会@S1点东西+谁离得开@S1呢',
           '日常.名词':'@S1无处不在+@S1会随时出现',
           '日常':'每天想想@S1+@S1的事儿记心上+说着说着就能碰上@S1',
'经常':'@S1不是难事+常常@S1点啥',
'偶尔':'我也会@S1+有一次@S1+很少@S1@S1',
'日记':'然后，@S1'+'我还记得，@S1+后来,@S1+之后，@S1+@S1',
'设定':'好像，@S1+可能,@S1+还有，@S1',
'同类词':'@S0我记不清，@S1我想起来咯+最近@S0少见，@S1还可以+别光惦记@S0，@S1更有趣+@S0并不重要，@S1还行'
}


# 在多句累积统计最多概念时使用的标题描述，T有tree和topic的意思，比较抽象的概念，通常由普遍性常识为内容
T_dic = {'T.时间.运行':'时间如流水+时光飞逝+光阴似箭，日月如梭+时光一去不复返',
         'T.时间.态度':'珍惜时间+惜时如金+要节约时间+浪费时间就是犯罪',
         '':'',

         'T.坏概念':'刚才说有@S0要改进吗+发现@S0不行啊+刚听说@S0堪忧，啥情况+是说那谁@S0不好吗？'

}

S_trees = {'坏':['恶','毒','坏','惨','劣','莠','废','脏','庸','俗',],'好':['良','好','优','美','强','福','能'],
          '常识抽象':['生物','天然物','人工物','精神','事件','时间','空间','属性','属性值']
          }

Tr_und_dic = {'场所':'的地方+之处','事务':'的事情+那些事','能':'厉害+很牛+超强+有水平',
             '良':'很好很强大+棒棒哒+相当不错+让人开心愉快','植物':'有花花草草+草木葱葱+红花绿叶','水域线':'川流不息+滔滔江水+大江东去',
              '时间季':'一年之+这个季节是+在四季之','力量':'无穷的活力源于+快速成长的+变得强壮的'
              }